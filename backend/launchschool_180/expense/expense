#!/usr/bin/env ruby

require 'pg'
require 'io/console'

class CLI
  def initialize
    @expense_data = ExpenseData.new
  end

  def show_help
    puts <<~EOF
    An expense recording system

    Commands:

    add AMOUNT MEMO [DATE] - record a new expense
    clear - delete all expenses
    list - list all expenses
    delete NUMBER - remove expense with id NUMBER
    search QUERY - list expenses with a matching memo field
    EOF
  end

  def run(args)
    case args[0]
    when 'list'
      @expense_data.list_expenses
    when 'add'
      abort 'You must provide an amount and memo' unless args.length == 3

      amount = args[1]
      memo = args[2]
      @expense_data.add_expense(amount, memo)
    when 'search'
      abort 'You must provide a search term' unless args.length == 2

      query = args[1]
      @expense_data.search_expenses(query)
    when 'delete'
      abort 'You must provide an id to delete' unless args.length == 2

      id = args[1]
      @expense_data.delete_expense(id)
    when 'clear'
      puts "This will remove all expenses. Are you sure? (y/n)"
      ans = $stdin.getch
      @expense_data.delete_all_expenses if ans == 'y'
    else
      show_help
    end
  end
end

class ExpenseData
  def initialize
    @db_connection = PG.connect(dbname:'expense')

    setup_schema
  end

  def setup_schema
    sql = "SELECT COUNT(*) FROM information_schema.tables " +
          "WHERE table_schema = 'public' AND table_name = 'expenses'"
    result = @db_connection.exec(sql)
    if result.first['count'] == '0'
      sql = <<~EOF
        CREATE TABLE expenses (
          id SERIAL PRIMARY KEY,
          amount NUMERIC(10,2) NOT NULL CHECK (amount > 0.0),
          memo TEXT NOT NULL,
          created_on DATE
        );
      EOF
      @db_connection.exec(sql)
    end
  end

  def display_expenses(expenses)
    puts "There are #{expenses.ntuples} expenses."

    total = 0
    expenses.each do |tuple|
      columns = [ tuple['id'].rjust(3),
                  tuple['created_on'].rjust(10),
                  tuple['amount'].rjust(12),
                  tuple['memo'] ]

      puts columns.join(' | ')
      total += tuple['amount'].to_f
    end

    puts '-' * 50
    puts "Total                      #{total}"
  end

  def list_expenses
    sql = 'SELECT id, created_on, amount, memo  FROM expenses'
    result = @db_connection.exec(sql)
    display_expenses(result)
  end

  def add_expense(amount, memo)
    sql = 'INSERT INTO expenses (amount, memo, created_on) ' +
      'VALUES ($1, $2, CURRENT_DATE)'
    result = @db_connection.exec(sql, [amount, memo])
  end

  def search_expenses(query)
    sql = 'SELECT id, created_on, amount, memo FROM expenses WHERE' +
      ' memo ILIKE $1'
    result = @db_connection.exec(sql, [query])
    display_expenses(result)
  end

  def delete_expense(id)
    sql = 'SELECT * FROM expenses WHERE id = $1'
    result = @db_connection.exec(sql, [id])
    abort "There is no expense with id '#{id}'." if result.values.empty?

    sql = 'DELETE FROM expenses WHERE id = $1'
    result = @db_connection.exec(sql, [id])
  end

  def delete_all_expenses
    sql = 'DELETE FROM expenses'
    @db_connection.exec(sql)
  end
end

CLI.new.run(ARGV)
